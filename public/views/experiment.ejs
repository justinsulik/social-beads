<!DOCTYPE html>
<html>
    <head>
        <title>Experiment: Bead task</title>
        <script language="javascript" src="libraries/p5.min.js"></script>
        <script type="javascript" src="libraries/p5.dom.min.js"></script>
        <script language="javascript" src="libraries/d3.min.js"></script>
        <script language="javascript" src="libraries/lodash.min.js"></script>
        <script language="javascript" src="libraries/jquery-3.2.1.min.js"></script>
        <script language="javascript" src="jspsych/jspsych.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-instructions.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-socialbeads.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-survey-multi-choice.js"></script>
        <script language="javascript" src="jspsych/plugins/jspsych-external-html.js"></script>
        <link href="jspsych/css/jspsych.css" rel="stylesheet" type="text/css"></link>
    </head>
    <body>
    </body>
    <script>

    console.log('Retrieving survey input data...')
    var inputData = <%- surveyInputs %>
    var condition;
    var done = false;
    var startTime = 0;

    // validate the input data, so the experiment can be halted if data is missing
    var dataOk = false;
    console.log('    input data:', inputData)
    if ( inputData.generation>=0 && inputData.chain>=0 && (inputData.generation==0 || inputData.data.length > 0)) {
      dataOk = true
      if (inputData.chain%2==1) {
        condition = 'dtd';
        console.log('    condition:', condition)
      } else {
        condition = 'control';
        console.log('    condition:', condition)
      }
    } else {
      inputData.dataOk = false;
    };
    jsPsych.data.addProperties(inputData);

    // variables needed across multiple trials
    var timeline = [];
    var score = 0;
    var score2 = 0;
    var comprehensionRounds = [];
    var comprehension2Rounds = [];

    // experiment parameters
    var bonus = 0.92;
    var cost = 0.01;
    var endowment = 0.15;
    var basicPay = 0.5;
    var maxDraws = 15;
    var forceDraw = false;
    var maxEndowment, maxEndowmentString;
    if (forceDraw){
      maxEndowmentString = 'the minimum one bead'
      maxEndowment = endowment - cost;
    } else {
      maxEndowmentString = 'zero beads'
      maxEndowment = endowment;
    }
    var totalPay = basicPay + bonus + maxEndowment;

    var makeCode = function(len){
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxy0123456789";
        for( var i=0; i < len; i++ ){
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        }
        return text;
    };

    var cmpltnCd = makeCode(3)+'R'+inputData.chain+'R' + makeCode(3) + '4'+inputData.generation+'4'
    jsPsych.data.addProperties({cmpltnCd: cmpltnCd});
    console.log(cmpltnCd, inputData.trialId)

    // check that the participant's visible window is a certain size before continuing
    var welcome_block = {
      type: "instructions",
      pages: ["<div style='width:900px;height:640px;border:1px solid black'><p>Welcome to the experiment. Please maximize this window, then click 'next' (or hit the right arrow) to begin.</p>"+
      "The experiment will not proceed if the window <b>display area</b> is less than 640 pixels high or 900 wide. That's the size surrounded by a black border.</p>" +
      "<p>If the experiment doesn't begin when you click next but you have maximized this window, then your screen may be too small, or you may have too large of a toolbar or menubar taking up space. " +
      "If you're having trouble at this point, please just return the HIT.</p>"],
      show_clickable_nav: true
    };

    // loops over welcome_block, checking display window size
    var splash_screen = {
      timeline: [welcome_block],
      loop_function: function() {
        var wdth = document.documentElement.clientWidth;
        var hght = document.documentElement.clientHeight;
        console.log("height:",hght,"width:",wdth);
        if (wdth > 900 & hght > 640 ){
          return false;
        } else {
          console.log("height:",hght,"width:",wdth);
          return true;
        }
        }
    };

    // consent
    var consent = {
      type: 'external-html',
      url: '../views/consent.html',
      check_fn: function(){
        startTime = (new Date()).getTime();
        return true;
      },
      cont_btn: 'consent'
    }

    // instructions
    var startInstructions = {
      type: 'instructions',
      pages: ["We are going to do a task that involves drawing colored beads out of an urn until you're confident what the majority color in that urn is.",
              "We will begin with some detailed instructions, accompanied by a visual illustration of the bead task.",
              "After we've gone through the instructions, your understanding of the task will be tested.",
              "You need to get <b>all</b> the comprehension questions right before you can proceed to the actual task.",
              "If you get <b>any</b> wrong, we'll go through the instructions and test your understanding again, until you get all the test questions right.",
              "About 50% of participants fail to get them all right on the first attempt, so if you pay careful attention, you can avoid wasting time.",
              "Now, we will start going through the instructions."],
      show_clickable_nav: true
    };

    // practice trial
    var trainingTrial = {
      type: 'socialbeads',
      training: true,
      firstColor: [0, 0, 0],
      colorRatio: 0.8,
      maxDraws: maxDraws
    };

    // elements needed for comprehension check, and for looping back through the instructions if participant fails the comprehension check
    var comprehensionInstructions = {
      type: 'instructions',
      pages: ["Next we are going to check whether you've understood the previous instructions by asking some True/False questions.",
              "You will not be able to proceed with the experiment until all of these comprehension questions are answered correctly.",
              "If you get any of these wrong, the previous instructions will be replayed so that you can check what the right answers are."],
      show_clickable_nav: true
    };

    var comprehensionOptions= ['True', 'False'];
    var correctAnswers = {"Q0": "True", "Q1" : "False", "Q2" : "False", "Q3" : "True", "Q4" : "True"};

    var comprehension1 = {
      type: 'survey-multi-choice',
      questions: [
        {prompt: 'Each urn has different majority colors',
          options: comprehensionOptions,
          horizontal: true
        },
        {prompt: 'Beads will be drawn from both of the urns',
          options: comprehensionOptions,
          horizontal: true
        },
        {prompt: 'If five beads are drawn, there will be five fewer beads left in the urn',
          options: comprehensionOptions,
          horizontal: true
        },
        {prompt: 'It’s up to me to decide when I’ve seen enough beads',
          options: comprehensionOptions,
          horizontal: true
        },
        {prompt: 'Beads are drawn at random from the urn',
          options: comprehensionOptions,
          horizontal: true
        }
      ],
      on_finish: function(data){
        // score the responses
        var responses = JSON.parse(data.responses);
        var comprehensionTracker = [0, 0, 0, 0, 0];
        var questionCounter = 0;
        score = _.reduce(responses, (tally, response, questionNumber)=>{
           if (response == correctAnswers[questionNumber]) {
             comprehensionTracker[questionCounter] = 1
             tally += 1
           }
           questionCounter+=1
           return tally
        }, 0)
        comprehensionRounds.push(comprehensionTracker);
      }
    };

    var feedback1 = {
      type: 'instructions',
      pages: function(){
        if (score < 5){
          return ['You got ' + score + '/5 correct. We will go through the instructions and demonstration again.'];
        } else {
          return ["You got them all right! Now we're going to provide a few more instructions. Please read them carefully."];
        }
      },
      show_clickable_nav: true
    };

    // node for looping through instructions until score is 5 (out of 5 questions)
    var loop_node = {
      timeline: [startInstructions, trainingTrial, comprehensionInstructions, comprehension1, feedback1],
      loop_function: function(data){
        if (score==5){
          return false;
        } else {
          return true;
        }
      }
    };

    var endowmentInstructions = {
      type: 'instructions',
      show_clickable_nav: true,
      pages: ["We need to tell you about a couple of ways that you can earn <b>additional money</b> for completing this task, on top of the basic payment.",
        "First, if you correctly guess the majority color, we will pay you a <b>bonus</b> of $"+bonus.toFixed(2)+". You just have one chance to guess and win this bonus."+
        "<br><br>To be clear: we are talking about the majority color of all the beads in the urn, not just the majority color of the beads that you drew out. Because we are randomly drawing beads from the urn, you just might happen to draw more of the minority color.",
        "If this were the only factor, everyone would just draw lots of beads from the urn to increase their chances of guessing right. So <b>separately</b> from the bonus, we're giving you some money (an <b>'endowment'</b>) and you will use this endowment to <b>pay a cost</b> each time you want to draw a bead and see its color.",
        "The endowment is $"+endowment.toFixed(2)+" and it will cost $"+cost.toFixed(2)+" each time you wish to see a bead's color. You get to keep whatever you don't spend from the endowment."+
        "<br><br>For example, if you decide you only want to see one coloured bead, you'll spend $"+cost.toFixed(2)+" of your endowment and keep the remaining $"+(maxEndowment-cost).toFixed(2)+". If you decide to see "+maxDraws+" colored beads, you'll spend all of your endowment."+
        "<br><br>Remember, the <b>bonus</b> for guessing right is separate from the <b>endowment</b> for paying for beads.",
        "We will draw " + maxDraws + " beads regardless, but it's up to you how many of those beads you wish to pay to see. Once you've decided you've seen enough, you'll stop paying, and the remainder of the beads will be grayed out so you can't see their color.",
        "The <b>maximum</b> potential reward for this study is as follows:"+
        "<p style='text-align: left'>&nbsp;&nbsp;$"+basicPay.toFixed(2)+" (basic payment)</p>" +
        "<p style='text-align: left'>+$"+bonus.toFixed(2)+" (bonus, IF you guess the right majority color)</p>" +
        "<p style='text-align: left'>+$"+maxEndowment.toFixed(2)+" (remaining endowment, IF you choose to see "+maxEndowmentString+")</p>"+
        "<p style='text-align: left'>=<b>$"+totalPay.toFixed(2)+" total</b></p>",
        "The <b>MINIMUM</b> potential reward for this study is as follows:"+
        "<p style='text-align: left'>&nbsp;&nbsp;$"+basicPay.toFixed(2)+" (basic payment)</p>" +
        "<p style='text-align: left'>+$0.00 (bonus, IF you guess the wrong majority color)</p>" +
        "<p style='text-align: left'>+$0.00 (remaining endowment, IF you choose to see the maximum "+maxDraws+" beads)</p>"+
        "<p style='text-align: left'>=<b>$"+basicPay.toFixed(2)+" total</b></p>",
        "To be completely transparent with you, this task involves a basic trade-off. On the one hand, drawing beads provides information about what’s in the urn. On the other hand, drawing beads costs you money."+
        "<br><br>The whole point is that it's up to you to decide when you're ready to guess what the majority color in the urn is, and how many beads you'd like to see."]
    }

    var socialInstructions = {
      type: 'instructions',
      show_clickable_nav: true,
      pages: [
        "The other thing we must tell you is that you're not the only participant deciding what the majority color is.",
        "Some other Turkers have already been through this exact same task, seeing beads drawn from the same urn as you, with the same majority color and same ratio of colors. Since the draws were random, they didn't necessarily see the exact same sequence of beads that you will.",
        "Like you, they could draw "+ maxDraws +" beads, and could choose how many of those they were willing to pay to see.",
        "While you're doing the task, we will show you how many other people have already been through this process with the same urn as you.",
        ]
      }

    if (condition == 'dtd') {
      socialInstructions.pages.push("We will also tell you how many beads each of them paid to see (but not what color those beads were).");
    }

    if (condition == 'decision') {
      socialInstructions.pages.push("We will also tell you tell you what majority color they guessed (though not if their guess was correct).");
    }

    socialInstructions.pages.push("Each of these other Turkers (aside from the first person in the chain) was told the same thing about previous participants as you.");

    var comprehensionInstructions2 = {
      type: 'instructions',
      pages: ["We are going to check whether you've understood the previous instructions by asking some True/False questions.",
              "You will not be able to proceed with the experiment until all of these comprehension questions are answered correctly.",
              "If you get any of these wrong, the previous instructions will be replayed so that you can check what the right answers are."],
      show_clickable_nav: true
    };

    var correctAnswers2 = {"Q0": "False", "Q1" : "True", "Q2" : "True", "Q3" : "True", "Q4" : "False"};

    var comprehension2 = {
      type: 'survey-multi-choice',
      questions: [
        {prompt: "My total payout will not be affected by how many beads' colors I choose to see",
          options: comprehensionOptions,
          horizontal: true
        },
        {prompt: "I can keep whatever I don't spend from the endowment",
          options: comprehensionOptions,
          horizontal: true
        },
        {prompt: 'I get a bonus for correctly guessing the majority color',
          options: comprehensionOptions,
          horizontal: true
        },
        {prompt: 'I only have one chance at guessing the majority color',
          options: comprehensionOptions,
          horizontal: true
        }
      ],
      on_finish: function(data){
        // score the responses
        var responses = JSON.parse(data.responses);
        var comprehensionTracker;
        if (inputData.generation>0){
          comprehensionTracker = [0, 0, 0, 0, 0]
        } else {
          comprehensionTracker = [0, 0, 0, 0]
        };
        var questionCounter = 0;
        score2 = _.reduce(responses, (tally, response, questionNumber)=>{
           console.log(response, questionNumber, tally)
           if (response == correctAnswers2[questionNumber]) {
             comprehensionTracker[questionCounter] = 1
             tally += 1
           }
           questionCounter+=1
           return tally
        }, 0)
        comprehension2Rounds.push(comprehensionTracker);
      }
    };

    var feedback2 = {
      type: 'instructions',
      show_clickable_nav: true,
      pages: function(){
        if (score2 == passMark){
          return ["You got them all right! Now we're finally ready to begin the experiment."]
        } else {
          return ['You got ' + score2 + '/'+passMark+' correct. We will go through the latest set of instructions again.'];
        }
      }
    };

    // add extra comprehension questions if not the first generation, and adjust the total correct needed to pass
    // and include the extra instructions about social info if needed
    var passMark;
    var comprehension2timeline;
    if (inputData.generation>0) {
      passMark = 5;
      comprehension2.questions.push({
        prompt: 'All previous participants saw the exact same sequence of bead colors',
        options: comprehensionOptions,
        horizontal: true
      });
      comprehension2timeline = [endowmentInstructions, socialInstructions, comprehensionInstructions2, comprehension2, feedback2];
    } else {
      passMark = 4;
      comprehension2timeline = [endowmentInstructions, comprehensionInstructions2, comprehension2, feedback2];
    }

    var loop_node2 = {
      timeline: comprehension2timeline,
      loop_function: function(data){
          if (score2 == passMark) {
            return false;
          } else {
            return true;
          }
      }
    };

    // bead trial

    var guess;
    var draws;

    var trial = {
      type: 'socialbeads',
      socialData: inputData.data || [],
      condition: condition,
      incentive: {cost: cost, endowment: endowment, bonus: bonus},
      chain: inputData.chain,
      generation: inputData.generation,
      branch: inputData.branch,
      maxDraws: maxDraws,
      on_finish: function(data){
        cmpltnCd += 'R' + data.drawsToDecision + 'T' + data.choice + data.rightAnswer;
      }
    }

    var bioData = {};

    function checkResponses(){
      //Check that all questions are answered, and that answers are appropriate
      var age = $('input[name=ageText]', '#biography').val();
      var gender = $('input[name=genderRadio]:checked', '#biography').val();
      var language = $('input[name=languageRadio]:checked', '#biography').val();
      var comments = $('textarea', '#biography').val();

      var ageFail = true;
      var genderFail = true;
      var genderSelfDescribe = false;
      var languageFail = true;

      if (age > 0) {
        ageFail = false;
        $('#age>p').css('color', 'black');
      } else {
        $('#age>p').css('color', 'red');
      }

      if (gender == 'other') {
        genderSelfDescribe = true;
        var descr = $('input[name=other_text]', '#biography').val().replace(/\s+/g, '');
        if (descr.length > 0) {
          genderSelfDescribe = false;
          gender = descr
        }
      }

      if (typeof gender != 'undefined') {
        genderFail = false;
        $('#gender>p').css('color', 'black');
      } else {
        $('#gender>p').css('color', 'red');
      }

      if (language >= 0) {
        languageFail = false;
        $('#language>p').css('color', 'black');
      } else {
        $('#language>p').css('color', 'red');
      }


      if (genderFail || ageFail || languageFail || genderSelfDescribe) {
        var alertMessage = "Please check you've provided an answer to all questions in red.";
        if (ageFail) {
          alertMessage += " Check that you've only included numbers when giving your age. "
        }
        if (genderSelfDescribe) {
          alertMessage += " If you've chosen to self-describe your gender, please fill in a value. "
        }
        alert(alertMessage);
      } else {
        bioData = {
          age: age,
          gender: gender,
          language: language,
          comments: comments
        };
        return true;
      }

    };

    var biographic = {
      type: 'external-html',
      url: '../views/biographic.html',
      check_fn: checkResponses,
      cont_btn: 'submit',
    }

    var abort = {
      type: 'instructions',
      pages: ['There has been a server error, and we are not able to load the experiment script. Please return the HIT.']
    }

    if (dataOk) {
      timeline.push(splash_screen);
      timeline.push(consent);
      timeline.push(loop_node);
      timeline.push(loop_node2);
      timeline.push(trial);
      timeline.push(biographic);
      console.log('Survey starting...')

    } else {
      // the data doesn't have the right info, so abort the experiment
      timeline.push(abort)
      console.log('Survey aborted...')
    }

    jsPsych.init({
        default_iti: 500,
        timeline: timeline,
        on_finish: function(){
          done = true;
          save();
        }
    });

    function save(){
      // save data to database
      var endTime = (new Date()).getTime();
      var duration = endTime-startTime;
      var interactionData = jsPsych.data.getInteractionData().json();
      jsPsych.data.get().addToLast({biodata: bioData,
                                    duration: duration,
                                    interactionData: interactionData,
                                    comprehension1: comprehensionRounds,
                                    comprehension2: comprehension2Rounds});

      var data = jsPsych.data.get().json();
      console.log('    About to post survey output data...', data);

      var dataUrl = '/e3PlV5?trialId=' + inputData.trialId;
      $.ajax({
         type: 'POST',
         url: dataUrl,
         data: data,
         contentType: "application/json",
         error: function(request, status, error){
           console.log('    Error posting data...', request, status, error)
         },
         complete: finish(cmpltnCd)
       });
    }

    function finish(cmpltnCd){
      // Once finished, send them to the final debrief screen
      cmpltnCd +=  inputData.trialId;
      window.location.href = "/x5JVJpXO2e?gvmejG="+cmpltnCd;
    }

    window.onbeforeunload = function (e) {
      //If they close the window, void their chain position
      if (done==false){
        var dataUrl = '/k727Y?trialId=' + inputData.trialId;
        inputData.time = (new Date()).getTime() - startTime;
        $.ajax({
           type: 'POST',
           url: dataUrl,
           data: JSON.stringify(inputData),
           contentType: "application/json",
           error: function(request, status, error){
             console.log('    Error posting data...', request, status, error)
           },
           complete: console.log('done')
         });

      }
    }

    </script>
</html>
